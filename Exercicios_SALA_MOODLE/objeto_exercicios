# class Pessoa:
#     def __init__(self, nome, idade):
#         self.nome = nome
#         self.idade = idade

#     def apresentar(self):
#         print(f"Ol√°, meu nome √© {self.nome} e tenho {self.idade} anos.")

# # Criando dois objetos Pessoa
# Pessoa01 = Pessoa("Juliana", "31 anos")
# Pessoa02 = Pessoa("Julissan", "34 anos")

# # Imprimindo os valores dos atributos
# print(f"Pessoa01 - Nome: {Pessoa01.nome}, Idade: {Pessoa01.idade}")
# print(f"Pessoa02 - Nome: {Pessoa02.nome}, Idade: {Pessoa02.idade}")

# # Testando o m√©todo apresentar
# Pessoa01.apresentar()
# Pessoa02.apresentar()

# class Carro:
#    def __init__(self, marca, modelo, ano):
#         self.marca = marca
#         self.modelo = modelo
#         self.ano = ano 

# Carro01 = Carro("Chevrolet", "Traker", "2025")
# Carro02 = Carro("JEPP", "Renegade", "2026")
# Carro03 = Carro("Fiat", "Mobi", "2025")

# print(f"Carro01 - Marca: {Carro01.marca}, Modelo: {Carro01.modelo}, Ano: {Carro01.ano}")
# print(f"Carro02 - Marca: {Carro02.marca}, Modelo: {Carro02.modelo}, Ano: {Carro02.ano}")
# print(f"Carro03 - Marca: {Carro03.marca}, Modelo: {Carro03.modelo}, Ano: {Carro03.ano}")


# Carro04 = Carro("Renault", "kwid", "2026")

# def __str__(self):
#         return f"Marca: {self.marca}, Modelo: {self.modelo}, Ano: {self.ano}"

# # Antes da altera√ß√£o
# print("Antes da altera√ß√£o do Carro04:")
# print(f"Carro04 - Marca: {Carro04.marca}, Modelo: {Carro04.modelo}, Ano: {Carro04.ano}")

# # Alterando o ano do Carro04
# Carro04.ano = 2030

# # Depois da altera√ß√£o
# print("\nDepois da altera√ß√£o do Carro04:")
# print(f"Carro04 - Marca: {Carro04.marca}, Modelo: {Carro04.modelo}, Ano: {Carro04.ano}")

# class ContaBancaria:
#     def __init__(self, num_conta: str, titular: str, saldo: int = 0):
#         self.num_conta = num_conta
#         self.titular = titular
#         self.saldo = saldo

# # Criando objetos fora da classe
# ContaBancaria01 = ContaBancaria("12586-1", "Jo√£o")
# ContaBancaria02 = ContaBancaria("16254-0", "Maria")
# ContaBancaria03 = ContaBancaria("11364-8", "Claudia")

# # Imprimindo os dados da conta
# print(f"ContaBancaria01 - N√∫mero da conta: {ContaBancaria01.num_conta}, Titular: {ContaBancaria01.titular}, Saldo: {ContaBancaria01.saldo}")
# print(f"ContaBancaria02 - N√∫mero da conta: {ContaBancaria02.num_conta}, Titular: {ContaBancaria02.titular}, Saldo: {ContaBancaria02.saldo}")
# print(f"ContaBancaria03 - N√∫mero da conta: {ContaBancaria03.num_conta}, Titular: {ContaBancaria03.titular}, Saldo: {ContaBancaria03.saldo}")

# class ContaBancaria:
#     def __init__(self, titular: str, saldo: int = 0):
#         self.titular = titular
#         self.saldo = saldo
#         self.historico = []

#     def depositar(self, valor: int):
#         self.saldo += valor
#         print(f"Dep√≥sito de R${valor} realizado. Novo saldo: R${self.saldo}")

#     # def sacar(self, valor: int):
#     #     if self.saldo >= valor:
#     #         self.saldo -= valor
#     #         print(f"Saque de R${valor} realizado. Novo saldo: R${self.saldo}")
#     #     else:
#     #         print("Saldo insuficiente para saque.")

#     def sacar(self, valor: int):
#         if self.saldo >= valor:
#             self.saldo -= valor
#             self.historico.append(f"Saque: R${valor}")
#             return True
#         else:
#             self.historico.append(f"Saque falhou: R${valor} (Saldo insuficiente)")
#             return False
        
# # Criando uma conta
# # conta = ContaBancaria("Jo√£o")

# # Testando dep√≥sitos e saques
# # conta.depositar(100)
# # conta.sacar(50)
# # conta.sacar(100)  # Isso deve dar erro de saldo insuficiente

# # conta.depositar(1100)
# # conta.sacar(500)
# # conta.sacar(2000)

#     def extrato(self):
#         print(f"\nExtrato da conta de {self.titular}")
#         print("-" * 30)
#         for operacao in self.historico:
#             print(operacao)
#         print(f"Saldo atual: R${self.saldo}")
#         print("-" * 30)


# # # Criando uma conta
# # conta = ContaBancaria("Jo√£o")

# # # Fazendo opera√ß√µes
# # conta.depositar(200)
# # conta.sacar(50)
# # conta.sacar(300)  # Vai falhar

# # Criando a conta
# conta = ContaBancaria("Jo√£o")

# # Fazendo dep√≥sito
# conta.depositar(200)

# # Tentando saque de R$50
# if conta.sacar(50):
#     print("‚úÖ Saque de R$50 realizado com sucesso!")
# else:
#     print("‚ùå Falha no saque de R$50.")

# # Tentando saque de R$300 (vai falhar)
# if conta.sacar(300):
#     print("‚úÖ Saque de R$300 realizado com sucesso!")
# else:
#     print("‚ùå Falha no saque de R$300 (saldo insuficiente).")

# # Mostrando extrato
#     conta.extrato()

# class Aluno:
#     def __init__(self, nome: str, nota: float):
#         self.nome = nome
#         self.nota = nota

#     def __str__(self):
#        return f"Aluno: {self.nome} - Nota: {self.nota}"
    
# # Criando objetos
# aluno1 = Aluno("Maria", 9.5)
# aluno2 = Aluno("Jo√£o", 8.0)

# # Imprimindo objetos
# print(aluno1)
# print(aluno2)


# class Turma:
#     def __init__(self):
#         self.alunos = []  # Lista vazia para come√ßar

#     def adicionar_aluno(self, aluno: Aluno):
#         self.alunos.append(aluno)
#         print(f"‚úÖ Aluno {aluno.nome} adicionado com nota {aluno.nota}")

#     def add_aluno(self, alunos: str):
#         self.add_aluno += Turma
#         print(f"O aluno {self.nome} foi adicionado a {self.turma}")

# # Criando alunos
# aluno1 = Aluno("Ana", 9.5)
# aluno2 = Aluno("Bruno", 7.0)
# aluno3 = Aluno("Carla", 8.3)

# # Criando turma
# turma = Turma()

# # Adicionando alunos na turma
# turma.adicionar_aluno(aluno1)
# turma.adicionar_aluno(aluno2)
# turma.adicionar_aluno(aluno3)

# def listar_alunos(self):
#         print("\nüìã Lista de Alunos na Turma:")
#         for aluno in self.alunos:
#             print(f"üßë {aluno.nome} - Nota: {aluno.nota}")

#             turma.listar_alunos()

class Cachorro:
    especie = "Canis familiaris"  # üß¨ Atributo de classe (igual para todos)

    def __init__(self, nome: str, idade: int):
        self.nome = nome          # üêæ Atributo de inst√¢ncia (individual)
        self.idade = idade

# Criando dois cachorros
dog1 = Cachorro("Rex", 5)
dog2 = Cachorro("Luna", 3)

# Acessando atributos
print(f"{dog1.nome} tem {dog1.idade} anos.")
print(f"{dog2.nome} tem {dog2.idade} anos.")

# Acessando o atributo de classe pela CLASSE
print("Esp√©cie (pela classe):", Cachorro.especie)

# Acessando o atributo de classe pelo OBJETO
print("Esp√©cie (pelo objeto):", dog1.especie)








