# Uma funÃ§Ã£o lambda Ã© uma maneira curta e rÃ¡pida de escrever funÃ§Ãµes simples em Python.

# Ã‰ como fazer uma funÃ§Ã£o sem precisar usar o def.

dobro = lambda x: x * 2

# lambda = palavra-chave que cria a funÃ§Ã£o.
# x = o parÃ¢metro (como uma variÃ¡vel de entrada).
# x * 2 = o que a funÃ§Ã£o retorna (o que ela faz).

# Usando a funÃ§Ã£o
# Depois de criar a funÃ§Ã£o lambda, vocÃª pode usÃ¡-la assim:

print(dobro(5))  # SaÃ­da: 10

soma = lambda a, b: a + b
print(soma(3, 4))  # SaÃ­da: 7

# Onde se usa muito lambda?
# VocÃª vai ver lambda sendo muito usado com funÃ§Ãµes como map(), filter() e sort() â€” para fazer coisas rapidinhas sem criar uma funÃ§Ã£o completa.
# Exemplo com map():

numeros = [1, 2, 3, 4]
dobrados = list(map(lambda x: x * 2, numeros))
print(dobrados)  # [2, 4, 6, 8]

# Desafio 1 â€“ Dobrar nÃºmeros com map() e lambda
# âœ¨ DescriÃ§Ã£o:
# Use lambda para dobrar os valores de uma lista.
# ğŸ“Œ Enunciado:
# Dada a lista abaixo, use map() com uma funÃ§Ã£o lambda para dobrar todos os nÃºmeros:

# Como funciona map()?
# A funÃ§Ã£o map() aplica uma funÃ§Ã£o (neste caso, a lambda) em cada item da lista.
# lambda x: x * 2 vai dobrar cada nÃºmero da lista.
# Usamos list() para converter o resultado em uma lista normal.

numeros = [1, 2, 3, 4, 5]
print(numeros)
print(dobrados)

# ExplicaÃ§Ã£o
# lambda x: x * 2 â†’ Ã© uma funÃ§Ã£o que recebe x e devolve x * 2.
# map(...) â†’ aplica isso em todos os itens da lista numeros.
# list(...) â†’ transforma o resultado em uma lista que vocÃª pode imprimir.

# Desafio 2 â€“ Filtrar nÃºmeros pares com filter() e lambda
# âœ¨ DescriÃ§Ã£o:
# Use lambda para pegar sÃ³ os nÃºmeros pares da lista.
# ğŸ“Œ Enunciado:
# Com a lista abaixo, use filter() e lambda para manter sÃ³ os pares:

# LÃ³gica passo a passo
# lambda Ã© usada para criar uma funÃ§Ã£o sem nome.
# filter() vai aplicar essa funÃ§Ã£o em cada nÃºmero da lista e filtrar sÃ³ os que forem True.
# Um nÃºmero Ã© par se: numero % 2 == 0

numeros = [1, 2, 3, 4, 5, 6, 7, 8]
pares = list(filter(lambda x: x % 2 == 0, numeros))
print(pares)  # SaÃ­da: [2, 4, 6, 8]

# ExplicaÃ§Ã£o
# lambda x: x % 2 == 0 â†’ essa funÃ§Ã£o retorna True para nÃºmeros pares.
# filter(...) â†’ aplica essa funÃ§Ã£o a cada elemento da lista.
# list(...) â†’ converte o resultado (que Ã© um filtro) para uma lista visÃ­vel.

